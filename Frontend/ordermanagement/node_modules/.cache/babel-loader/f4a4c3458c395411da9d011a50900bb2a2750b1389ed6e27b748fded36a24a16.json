{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {};\n/** All built-in and custom scalars, mapped to their actual values */\n\nexport let Status = /*#__PURE__*/function (Status) {\n  Status[\"Completed\"] = \"COMPLETED\";\n  Status[\"Draft\"] = \"DRAFT\";\n  Status[\"Pending\"] = \"PENDING\";\n  Status[\"Shipped\"] = \"SHIPPED\";\n  return Status;\n}({});\nexport const GetCustomersDocument = gql`\n    query GetCustomers {\n  customers {\n    id\n    firstName\n    lastName\n    contactNumber\n    email\n    address {\n      addressLine1\n      addressLine2\n      city\n      state\n      country\n    }\n    orders {\n      id\n      orderDate\n      description\n      totalAmount\n      depositAmount\n      isDelivery\n      status\n      otherNotes\n    }\n  }\n}\n    `;\n\n/**\n * __useGetCustomersQuery__\n *\n * To run a query within a React component, call `useGetCustomersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetCustomersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetCustomersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetCustomersQuery(baseOptions) {\n  _s();\n  const options = {\n    ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(GetCustomersDocument, options);\n}\n_s(useGetCustomersQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\nexport function useGetCustomersLazyQuery(baseOptions) {\n  _s2();\n  const options = {\n    ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(GetCustomersDocument, options);\n}\n_s2(useGetCustomersLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});","map":{"version":3,"names":["gql","Apollo","defaultOptions","Status","GetCustomersDocument","useGetCustomersQuery","baseOptions","_s","options","useQuery","useGetCustomersLazyQuery","_s2","useLazyQuery"],"sources":["/Users/vladanlukic/myprojects/OrderManagement/Frontend/ordermanagement/src/graphql/generated/schema.ts"],"sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions = {} as const;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  DateTime: any;\n  Decimal: any;\n};\n\nexport type Address = {\n  __typename?: 'Address';\n  addressLine1?: Maybe<Scalars['String']>;\n  addressLine2?: Maybe<Scalars['String']>;\n  city?: Maybe<Scalars['String']>;\n  country?: Maybe<Scalars['String']>;\n  customerId: Scalars['Int'];\n  id: Scalars['Int'];\n  state?: Maybe<Scalars['String']>;\n};\n\nexport type AddressFilterInput = {\n  addressLine1?: InputMaybe<StringOperationFilterInput>;\n  addressLine2?: InputMaybe<StringOperationFilterInput>;\n  and?: InputMaybe<Array<AddressFilterInput>>;\n  city?: InputMaybe<StringOperationFilterInput>;\n  country?: InputMaybe<StringOperationFilterInput>;\n  customerId?: InputMaybe<ComparableInt32OperationFilterInput>;\n  id?: InputMaybe<ComparableInt32OperationFilterInput>;\n  or?: InputMaybe<Array<AddressFilterInput>>;\n  state?: InputMaybe<StringOperationFilterInput>;\n};\n\nexport type BooleanOperationFilterInput = {\n  eq?: InputMaybe<Scalars['Boolean']>;\n  neq?: InputMaybe<Scalars['Boolean']>;\n};\n\nexport type ComparableDateTimeOperationFilterInput = {\n  eq?: InputMaybe<Scalars['DateTime']>;\n  gt?: InputMaybe<Scalars['DateTime']>;\n  gte?: InputMaybe<Scalars['DateTime']>;\n  in?: InputMaybe<Array<Scalars['DateTime']>>;\n  lt?: InputMaybe<Scalars['DateTime']>;\n  lte?: InputMaybe<Scalars['DateTime']>;\n  neq?: InputMaybe<Scalars['DateTime']>;\n  ngt?: InputMaybe<Scalars['DateTime']>;\n  ngte?: InputMaybe<Scalars['DateTime']>;\n  nin?: InputMaybe<Array<Scalars['DateTime']>>;\n  nlt?: InputMaybe<Scalars['DateTime']>;\n  nlte?: InputMaybe<Scalars['DateTime']>;\n};\n\nexport type ComparableDecimalOperationFilterInput = {\n  eq?: InputMaybe<Scalars['Decimal']>;\n  gt?: InputMaybe<Scalars['Decimal']>;\n  gte?: InputMaybe<Scalars['Decimal']>;\n  in?: InputMaybe<Array<Scalars['Decimal']>>;\n  lt?: InputMaybe<Scalars['Decimal']>;\n  lte?: InputMaybe<Scalars['Decimal']>;\n  neq?: InputMaybe<Scalars['Decimal']>;\n  ngt?: InputMaybe<Scalars['Decimal']>;\n  ngte?: InputMaybe<Scalars['Decimal']>;\n  nin?: InputMaybe<Array<Scalars['Decimal']>>;\n  nlt?: InputMaybe<Scalars['Decimal']>;\n  nlte?: InputMaybe<Scalars['Decimal']>;\n};\n\nexport type ComparableInt32OperationFilterInput = {\n  eq?: InputMaybe<Scalars['Int']>;\n  gt?: InputMaybe<Scalars['Int']>;\n  gte?: InputMaybe<Scalars['Int']>;\n  in?: InputMaybe<Array<Scalars['Int']>>;\n  lt?: InputMaybe<Scalars['Int']>;\n  lte?: InputMaybe<Scalars['Int']>;\n  neq?: InputMaybe<Scalars['Int']>;\n  ngt?: InputMaybe<Scalars['Int']>;\n  ngte?: InputMaybe<Scalars['Int']>;\n  nin?: InputMaybe<Array<Scalars['Int']>>;\n  nlt?: InputMaybe<Scalars['Int']>;\n  nlte?: InputMaybe<Scalars['Int']>;\n};\n\nexport type Customer = {\n  __typename?: 'Customer';\n  address?: Maybe<Address>;\n  contactNumber?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  firstName?: Maybe<Scalars['String']>;\n  id: Scalars['Int'];\n  isDeleted: Scalars['Boolean'];\n  lastName?: Maybe<Scalars['String']>;\n  orders?: Maybe<Array<Maybe<Order>>>;\n};\n\nexport type CustomerFilterInput = {\n  address?: InputMaybe<AddressFilterInput>;\n  and?: InputMaybe<Array<CustomerFilterInput>>;\n  contactNumber?: InputMaybe<StringOperationFilterInput>;\n  email?: InputMaybe<StringOperationFilterInput>;\n  firstName?: InputMaybe<StringOperationFilterInput>;\n  id?: InputMaybe<ComparableInt32OperationFilterInput>;\n  isDeleted?: InputMaybe<BooleanOperationFilterInput>;\n  lastName?: InputMaybe<StringOperationFilterInput>;\n  or?: InputMaybe<Array<CustomerFilterInput>>;\n  orders?: InputMaybe<ListFilterInputTypeOfOrderFilterInput>;\n};\n\nexport type ListFilterInputTypeOfOrderFilterInput = {\n  all?: InputMaybe<OrderFilterInput>;\n  any?: InputMaybe<Scalars['Boolean']>;\n  none?: InputMaybe<OrderFilterInput>;\n  some?: InputMaybe<OrderFilterInput>;\n};\n\nexport type Order = {\n  __typename?: 'Order';\n  customer?: Maybe<Customer>;\n  customerId: Scalars['Int'];\n  depositAmount: Scalars['Decimal'];\n  description?: Maybe<Scalars['String']>;\n  id: Scalars['Int'];\n  isDeleted: Scalars['Boolean'];\n  isDelivery: Scalars['Boolean'];\n  orderDate: Scalars['DateTime'];\n  otherNotes?: Maybe<Scalars['String']>;\n  status: Status;\n  totalAmount: Scalars['Decimal'];\n};\n\nexport type OrderFilterInput = {\n  and?: InputMaybe<Array<OrderFilterInput>>;\n  customer?: InputMaybe<CustomerFilterInput>;\n  customerId?: InputMaybe<ComparableInt32OperationFilterInput>;\n  depositAmount?: InputMaybe<ComparableDecimalOperationFilterInput>;\n  description?: InputMaybe<StringOperationFilterInput>;\n  id?: InputMaybe<ComparableInt32OperationFilterInput>;\n  isDeleted?: InputMaybe<BooleanOperationFilterInput>;\n  isDelivery?: InputMaybe<BooleanOperationFilterInput>;\n  or?: InputMaybe<Array<OrderFilterInput>>;\n  orderDate?: InputMaybe<ComparableDateTimeOperationFilterInput>;\n  otherNotes?: InputMaybe<StringOperationFilterInput>;\n  status?: InputMaybe<StatusOperationFilterInput>;\n  totalAmount?: InputMaybe<ComparableDecimalOperationFilterInput>;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  customers?: Maybe<Array<Maybe<Customer>>>;\n  orders?: Maybe<Array<Maybe<Order>>>;\n};\n\n\nexport type QueryCustomersArgs = {\n  where?: InputMaybe<CustomerFilterInput>;\n};\n\n\nexport type QueryOrdersArgs = {\n  where?: InputMaybe<OrderFilterInput>;\n};\n\nexport enum Status {\n  Completed = 'COMPLETED',\n  Draft = 'DRAFT',\n  Pending = 'PENDING',\n  Shipped = 'SHIPPED'\n}\n\nexport type StatusOperationFilterInput = {\n  eq?: InputMaybe<Status>;\n  in?: InputMaybe<Array<Status>>;\n  neq?: InputMaybe<Status>;\n  nin?: InputMaybe<Array<Status>>;\n};\n\nexport type StringOperationFilterInput = {\n  and?: InputMaybe<Array<StringOperationFilterInput>>;\n  contains?: InputMaybe<Scalars['String']>;\n  endsWith?: InputMaybe<Scalars['String']>;\n  eq?: InputMaybe<Scalars['String']>;\n  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;\n  ncontains?: InputMaybe<Scalars['String']>;\n  nendsWith?: InputMaybe<Scalars['String']>;\n  neq?: InputMaybe<Scalars['String']>;\n  nin?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;\n  nstartsWith?: InputMaybe<Scalars['String']>;\n  or?: InputMaybe<Array<StringOperationFilterInput>>;\n  startsWith?: InputMaybe<Scalars['String']>;\n};\n\nexport type GetCustomersQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetCustomersQuery = { __typename?: 'Query', customers?: Array<{ __typename?: 'Customer', id: number, firstName?: string | null, lastName?: string | null, contactNumber?: string | null, email?: string | null, address?: { __typename?: 'Address', addressLine1?: string | null, addressLine2?: string | null, city?: string | null, state?: string | null, country?: string | null } | null, orders?: Array<{ __typename?: 'Order', id: number, orderDate: any, description?: string | null, totalAmount: any, depositAmount: any, isDelivery: boolean, status: Status, otherNotes?: string | null } | null> | null } | null> | null };\n\n\nexport const GetCustomersDocument = gql`\n    query GetCustomers {\n  customers {\n    id\n    firstName\n    lastName\n    contactNumber\n    email\n    address {\n      addressLine1\n      addressLine2\n      city\n      state\n      country\n    }\n    orders {\n      id\n      orderDate\n      description\n      totalAmount\n      depositAmount\n      isDelivery\n      status\n      otherNotes\n    }\n  }\n}\n    `;\n\n/**\n * __useGetCustomersQuery__\n *\n * To run a query within a React component, call `useGetCustomersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetCustomersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetCustomersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetCustomersQuery(baseOptions?: Apollo.QueryHookOptions<GetCustomersQuery, GetCustomersQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetCustomersQuery, GetCustomersQueryVariables>(GetCustomersDocument, options);\n      }\nexport function useGetCustomersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCustomersQuery, GetCustomersQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetCustomersQuery, GetCustomersQueryVariables>(GetCustomersDocument, options);\n        }\nexport type GetCustomersQueryHookResult = ReturnType<typeof useGetCustomersQuery>;\nexport type GetCustomersLazyQueryHookResult = ReturnType<typeof useGetCustomersLazyQuery>;\nexport type GetCustomersQueryResult = Apollo.QueryResult<GetCustomersQuery, GetCustomersQueryVariables>;"],"mappings":";;AAAA,SAASA,GAAG,QAAQ,gBAAgB;AACpC,OAAO,KAAKC,MAAM,MAAM,gBAAgB;AAMxC,MAAMC,cAAc,GAAG,CAAC,CAAU;AAClC;;AAmKA,WAAYC,MAAM,0BAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAAA,OAANA,MAAM;AAAA;AAmClB,OAAO,MAAMC,oBAAoB,GAAGJ,GAAI;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASK,oBAAoBA,CAACC,WAAoF,EAAE;EAAAC,EAAA;EACnH,MAAMC,OAAO,GAAG;IAAC,GAAGN,cAAc;IAAE,GAAGI;EAAW,CAAC;EACnD,OAAOL,MAAM,CAACQ,QAAQ,CAAgDL,oBAAoB,EAAEI,OAAO,CAAC;AACtG;AAACD,EAAA,CAHSF,oBAAoB;EAAA,QAErBJ,MAAM,CAACQ,QAAQ;AAAA;AAE9B,OAAO,SAASC,wBAAwBA,CAACJ,WAAwF,EAAE;EAAAK,GAAA;EACzH,MAAMH,OAAO,GAAG;IAAC,GAAGN,cAAc;IAAE,GAAGI;EAAW,CAAC;EACnD,OAAOL,MAAM,CAACW,YAAY,CAAgDR,oBAAoB,EAAEI,OAAO,CAAC;AAC1G;AAACG,GAAA,CAHOD,wBAAwB;EAAA,QAEvBT,MAAM,CAACW,YAAY;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}